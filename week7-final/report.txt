$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ Proactive Computer security $
$		  Exam 2013		      $
$  Peter Hillebrandt Poulsen  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

+------------------------+
| Part 1: Stack overflow |
+------------------------+
1) How the stack overflow works and a commented disassembly.
A commented version of the function img_read is included in Appendix A. The
only parts of the function which are commented are executed during the 
exploit.
The stack overflow I've found takes advantage of a missing length check on
the length of the file name including the extension. The overflow is located 
in the function img_read 0x804d314 where a strcpy is made.  The filename 
is copied into .globals, which luckily is marked as being executable. As the
file extension is not valid it returns a short while after. As the stack is
overflown, the return address is controlled and returns to the shellcode.

2) A drawing depicting the layout of the stack frame at the moment of
   exploitation.
bottom of                                                        top of
memory                                                           memory
esp+    0x0          0x4 	  0x18       0x48 			0x4c
    pointer to    pointer to  start of  ebp points   return address
   	 .globals      filename   filename    here

3) The exploit

The exploit can be seen in the file stack-exploit.c.

+---------------------+
| Part 2: WWW exploit |
+---------------------+
1) How the www exploit works and a commented disassembly.
The commented disassembly of parts of the vulnerable function can be seen
in Appendix B.
The idea behind this exploit is that it modifies a function pointer, such
that it redirects to some shellcode located in a buffer. When this function
is called the shellcode is then executed.
As in the previous part the shellcode is a part of the filename and thus
located in the .globals segment. There is however a minor important deviation
from the previous part in that this exploit actually creates the file. This
means that forward-slashes can't be a part of the filename. This poses a 
challenge as we need to execute '/bin/sh'. It is overcome by changing this
shellcode:
	push word 0x732f
	push dword 0x6e69622f
to this:
	push word 0x732e
	add word [esp], 0x1
	push dword 0x6e69622e
	add word [esp], 0x1
Now that the shellcode is located in an executable segment with a static 
address, it just needs to be executed somehow. This is done by taking 
advantage of a vulnerability in the parse_v3 function. The vulnerability is
located around 0x804d0a0. As the filename flows into the area where the
file is stored, an abitrary address can be inserted in byte 200-203 of the
file. This address is written to in 0x804d0ab. The data it writes is
the width of the image and this can be controlled by altering the file upon
creating it. It is thus possible to write an abitrary value to an abitrary
address.
This is used to overwrite 0x8050b38. This address is called in 0x804d0e0 and
this gives code execution.

2) A drawing depicting the layout of the stack frame at the moment of
   exploitation.

bottom of                                                        top of
memory                                                           memory
esp +	0x1c	          0x20	       0x34     0x3c
		pointer	to     pointer to	   ebp    pointer to
		start of bmp   the start 			  file data in
		info header    of file data			  .globals

3) The exploit
The exploit can be seen in the file www-exploit.c.



+-----------------------------------+
| Appendix A - Vulnerable function |
+-----------------------------------+
 804d295:	55                   	push   ebp
 804d296:	89 e5                	mov    ebp,esp
 804d298:	83 ec 48             	sub    esp,0x48
 ; Move a pointer to the image data to eax
 804d29b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 804d29e:	8b 00                	mov    eax,DWORD PTR [eax]
 ; Compare with 0x0 and print usage if equal. This is for empty filenames
 804d2a0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
 804d2a3:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
 804d2a7:	74 0a                	je     804d2b3 <img_read+0x1e>
 ; Move img data to eax and compare with '-'. This is because there can't
 ; be '-' in the filename
 ; If it is equal print usage. Else go to malloc
 ; --- START USAGE PRINT AND ERROR ---
 804d2a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
 804d2ac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 804d2af:	3c 2d                	cmp    al,0x2d
 804d2b1:	75 2f                	jne    804d2e2 <img_read+0x4d>
 ; Print usage -read filename
 804d2b3:	a1 40 0b 05 08       	mov    eax,ds:0x8050b40 
 804d2b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
 804d2bc:	c7 44 24 08 16 00 00 	mov    DWORD PTR [esp+0x8],0x16
 804d2c3:	00 
 804d2c4:	c7 44 24 04 01 00 00 	mov    DWORD PTR [esp+0x4],0x1
 804d2cb:	00 
 804d2cc:	c7 04 24 58 e3 04 08 	mov    DWORD PTR [esp],0x804e358
 804d2d3:	e8 08 b7 ff ff       	call   80489e0 <fwrite@plt>
 ; Return with error
 804d2d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
 804d2dd:	e9 16 02 00 00       	jmp    804d4f8 <img_read+0x263>
 ; --- END USAGE PRINT AND ERROR ---
 ; Allocate 0xc 
 804d2e2:	c7 04 24 0c 00 00 00 	mov    DWORD PTR [esp],0xc
 804d2e9:	e8 fd eb ff ff       	call   804beeb <malloc>
 ; Move allocated pointer to edx
 804d2ee:	89 c2                	mov    edx,eax
 ; Fix some pointers. Eax will end up pointing to globals if all is well
 804d2f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 804d2f3:	89 10                	mov    DWORD PTR [eax],edx
 804d2f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 804d2f8:	8b 00                	mov    eax,DWORD PTR [eax]
 ; -- START ERROR RETURN --
 ; Malloc failed if this is entered
 804d2fa:	85 c0                	test   eax,eax
 804d2fc:	75 16                	jne    804d314 <img_read+0x7f>
 804d2fe:	c7 04 24 48 e3 04 08 	mov    DWORD PTR [esp],0x804e348
 804d305:	e8 c6 b6 ff ff       	call   80489d0 <perror@plt>
 804d30a:	b8 ff ff ff ff       	mov    eax,0xffffffff
 804d30f:	e9 e4 01 00 00       	jmp    804d4f8 <img_read+0x263>
 ; -- END ERROR RETURN --
 ; Copy the filename into globals. The vulnerability is here as globals
 ; is marked as executable
 804d314:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
 804d317:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804d31b:	c7 04 24 60 0d 05 08 	mov    DWORD PTR [esp],0x8050d60
 804d322:	e8 c9 b6 ff ff       	call   80489f0 <strcpy@plt>
 ; Call find_extension with globals. Returns 0 on success
 804d327:	c7 44 24 04 60 0d 05 	mov    DWORD PTR [esp+0x4],0x8050d60
 804d32e:	08 
 804d32f:	8d 45 d2             	lea    eax,[ebp-0x2e]
 804d332:	89 04 24             	mov    DWORD PTR [esp],eax
 804d335:	e8 16 ff ff ff       	call   804d250 <find_extension>
 ; -- START ERROR RETURN -- 
 804d33a:	85 c0                	test   eax,eax
 804d33c:	74 18                	je     804d356 <img_read+0xc1>
 804d33e:	a1 38 0b 05 08       	mov    eax,ds:0x8050b38
 804d343:	c7 04 24 70 e3 04 08 	mov    DWORD PTR [esp],0x804e370
 804d34a:	ff d0                	call   eax
 804d34c:	b8 ff ff ff ff       	mov    eax,0xffffffff
 804d351:	e9 a2 01 00 00       	jmp    804d4f8 <img_read+0x263>
 ; -- END ERROR RETURN --
 ; Check if the extension is bmp and return if it isn't. Since the file
 ; extension isn't bmp in the exploit this exit is used
 804d356:	c7 44 24 04 90 e3 04 	mov    DWORD PTR [esp+0x4],0x804e390
 804d35d:	08 
 804d35e:	8d 45 d2             	lea    eax,[ebp-0x2e]
 804d361:	89 04 24             	mov    DWORD PTR [esp],eax
 804d364:	e8 27 b7 ff ff       	call   8048a90 <strcasecmp@plt>
 ; -- START ERROR RETURN -- 
 804d369:	85 c0                	test   eax,eax
 804d36b:	74 18                	je     804d385 <img_read+0xf0>
 804d36d:	a1 38 0b 05 08       	mov    eax,ds:0x8050b38
 804d372:	c7 04 24 94 e3 04 08 	mov    DWORD PTR [esp],0x804e394
 804d379:	ff d0                	call   eax
 804d37b:	b8 ff ff ff ff       	mov    eax,0xffffffff
 804d380:	e9 73 01 00 00       	jmp    804d4f8 <img_read+0x263>
 ; -- END ERROR RETURN --
 804d385:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 ...
 804d4f8:	c9                   	leave  
 804d4f9:	c3                   	ret    
 804d4fa:	90                   	nop
 804d4fb:	90                   	nop

0804cffc <parse_v3>:
 804cffc:	55                   	push   ebp
 804cffd:	89 e5                	mov    ebp,esp
 804cfff:	53                   	push   ebx
 804d000:	83 ec 34             	sub    esp,0x34
 ; Move a pointer to the bmp data into ebp-0x14
 804d003:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 804d006:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
 804d009:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 ; Move to start of info header  and insert it in ebp-0x18
 804d00c:	83 c0 0e             	add    eax,0xe
 804d00f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
 804d012:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 ; Check the number of planes
 804d015:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
 804d019:	66 83 f8 01          	cmp    ax,0x1
 804d01d:	74 18                	je     804d037 <parse_v3+0x3b>
 ; -- START ERROR --
 804d01f:	a1 38 0b 05 08       	mov    eax,ds:0x8050b38
 804d024:	c7 04 24 a8 e2 04 08 	mov    DWORD PTR [esp],0x804e2a8
 804d02b:	ff d0                	call   eax
 804d02d:	b8 ff ff ff ff       	mov    eax,0xffffffff
 804d032:	e9 13 02 00 00       	jmp    804d24a <parse_v3+0x24e>
 ; -- END ERROR --
 ; Eax points points to start of info header. 
 804d037:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 ; Check bits pr pixel
 804d03a:	0f b7 40 0e          	movzx  eax,WORD PTR [eax+0xe]
 804d03e:	66 83 f8 18          	cmp    ax,0x18
 804d042:	74 18                	je     804d05c <parse_v3+0x60>
 ; -- START ERROR --
 804d044:	a1 38 0b 05 08       	mov    eax,ds:0x8050b38
 804d049:	c7 04 24 c8 e2 04 08 	mov    DWORD PTR [esp],0x804e2c8
 804d050:	ff d0                	call   eax
 804d052:	b8 ff ff ff ff       	mov    eax,0xffffffff
 804d057:	e9 ee 01 00 00       	jmp    804d24a <parse_v3+0x24e>
 ; -- END ERROR --
 ; Eax points points to start of info header. 
 804d05c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 ; Check the compression type
 804d05f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
 804d062:	85 c0                	test   eax,eax
 804d064:	74 18                	je     804d07e <parse_v3+0x82>
 ; -- START ERROR --
 804d066:	a1 38 0b 05 08       	mov    eax,ds:0x8050b38
 804d06b:	c7 04 24 f0 e2 04 08 	mov    DWORD PTR [esp],0x804e2f0
 804d072:	ff d0                	call   eax
 804d074:	b8 ff ff ff ff       	mov    eax,0xffffffff
 804d079:	e9 cc 01 00 00       	jmp    804d24a <parse_v3+0x24e>
 ; -- END ERROR --
 ; Eax points points to start of info header. 
 804d07e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
 ; Check for image type
 804d081:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
 804d084:	85 c0                	test   eax,eax
 804d086:	74 18                	je     804d0a0 <parse_v3+0xa4>
 ; -- START ERROR --
 804d088:	a1 38 0b 05 08       	mov    eax,ds:0x8050b38
 804d08d:	c7 04 24 10 e3 04 08 	mov    DWORD PTR [esp],0x804e310
 804d094:	ff d0                	call   eax
 804d096:	b8 ff ff ff ff       	mov    eax,0xffffffff
 804d09b:	e9 aa 01 00 00       	jmp    804d24a <parse_v3+0x24e>
 ; -- END ERROR --
 ; Point to block before image data? The vulnerability is here!
 804d0a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 804d0a3:	8b 00                	mov    eax,DWORD PTR [eax]
 ; Put width of image in edx and copy it in before the image data(eax)
 804d0a5:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
 804d0a8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
 804d0ab:	89 10                	mov    DWORD PTR [eax],edx
 ; Do the same for the height
 804d0ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 804d0b0:	8b 00                	mov    eax,DWORD PTR [eax]
 804d0b2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
 804d0b5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
 804d0b8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
 ; Point to image header and deref
 804d0bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 804d0be:	8b 00                	mov    eax,DWORD PTR [eax]
 ; Put width into edx
 804d0c0:	8b 10                	mov    edx,DWORD PTR [eax]
 804d0c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 ; And height into eax
 804d0c5:	8b 00                	mov    eax,DWORD PTR [eax]
 804d0c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
 ; Check for the size of the image
 804d0ca:	0f af c2             	imul   eax,edx
 804d0cd:	3d 00 00 10 00       	cmp    eax,0x100000
 804d0d2:	76 18                	jbe    804d0ec <parse_v3+0xf0>
 ; -- START ERROR --
 804d0d4:	a1 38 0b 05 08       	mov    eax,ds:0x8050b38
 804d0d9:	c7 04 24 36 e3 04 08 	mov    DWORD PTR [esp],0x804e336
 804d0e0:	ff d0                	call   eax
 804d0e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
 804d0e7:	e9 5e 01 00 00       	jmp    804d24a <parse_v3+0x24e>
 ; -- END ERROR --
 ; Allocate enough space for the image here
 804d0ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 ...
 804d24a:	83 c4 34             	add    esp,0x34
 804d24d:	5b                   	pop    ebx
 804d24e:	5d                   	pop    ebp
 804d24f:	c3                   	ret    
